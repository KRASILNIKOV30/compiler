<Z> -> <program> #
<program> -> <programNode> ; <programNodes> | <programNode>
<programNode> -> <declaration> | <statement>

<declaration> -> <variableDeclaration> | <functionDeclaration>

<variableDeclaration> -> <declarationKind> <ident> = <variableInit>
<declarationKind> -> const | let
<variableInit> -> <expression>
<functionDeclaration> -> function <ident> ( <paramList> ) <blockStatement>
<paramList> -> <parameter> <paramListRem> | e
<paramListRem> -> , <parameter> <paramListRem> | e
<parameter> -> <ident> <defaultParameter>
<defaultParameter> -> = <expression> | e

<statement> -> <blockStatement> | <expressionStatement> | <whileStatement> | <returnStatement> | <ifStatement> | <labeledStatement>

<blockStatement> -> { <blockActions> }
<blockActions> -> <blockAction> ; <blockActions> | e
<blockAction> -> <declaration> | <statement>

<expressionStatement> -> <expression>

<whileStatement> -> while ( <expression> ) <blockStatement>

<returnStatement> -> return <expression>

<ifStatement> -> if ( <expression> ) <blockStatement> <else>
<else> -> else <elseStatement> | e
<elseStatement> -> <ifStatement> | <blockStatement>

<labeledStatement> -> <ident> : <expressionStatement>

<expression> -> <callExpression>
<expression> -> <arrayExpression>
<expression> -> <memberExpression>
<expression> -> <arrowFunctionExpression>
<expression> -> <binaryExpression>
<expression> -> <objectExpression>
<expression> -> <newExpression>
<expression> -> <assignmentExpression>
<expression> -> <commonExpression>

<callExpression> -> <callObject> ( <expression> )
<callObject> -> <ident> | <memberExpression>

<arrayExpression> -> [ <arrayList> ]
<arrayList> -> <arrayItem> <arrayListRem> | e
<arrayListRem> -> , <arrayItem> <arrayListRem> | e

<memberExpression> -> <memberObject> <memberExpressionRem>
<memberObject> -> <expression>
<memberExpressionRem> -> . <expression> | e

<arrowFunctionExpression> -> <arrowFunctionParamList> => <arrowFunctionBody>
<arrowFunctionParamList> -> <ident>
<arrowFunctionParamList> -> ( <paramList> )
<arrowFunctionBody> -> <blockStatement> | <expression>

<objectExpression> -> { <objectDeclaration> }
<objectDeclaration> -> <objectProperty> <objectDeclarationRem> | e
<objectDeclarationRem> -> <objectProperty> <objectDeclarationRem> | e
<objectProperty> -> <ident> : <objectPropertyType>
<objectPropertyType> -> <expression>

<newExpression> -> new <newExpressionCallee>
<newExpressionCallee> -> <ident> | <memberExpression>

<assignmentExpression> -> <assignmentPart> = <assignmentPart>
<assignmentPart> -> <expression>

<commonExpression> -> <expression> <relOp> <simexp>
<commonExpression> -> <simexp>
<expListOpt> -> <expList> | e
<expList> -> <expList> , <expression>
<expList> -> <expression>
<simexp> -> <simexp> <lowPriorityOp> <simterm>
<simexp> -> <simterm>
<simterm> -> <simterm> <highPriorityOp> <term>
<simterm> -> <term>
<term> -> ( <expression> )
<term> -> + <term>
<term> -> - <term>
<term> -> not <term>
<term> -> ! <term>
<term> -> <ident>
<term> -> int
<term> -> float
<term> -> true
<term> -> false
<term> -> string
<ident> -> <ident> [ <expression> ]
<ident> -> <ident> ( <expListOpt> )
<ident> -> id
<relOp> -> <
<relOp> -> >
<relOp> -> <=
<relOp> -> >=
<relOp> -> ==
<relOp> -> !=
<lowPriorityOp> -> +
<lowPriorityOp> -> -
<lowPriorityOp> -> or
<highPriorityOp> -> *
<highPriorityOp> -> mod
<highPriorityOp> -> div
<highPriorityOp> -> and
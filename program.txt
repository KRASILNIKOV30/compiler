<Z> -> <program> #
<program> -> main <block>
<block> -> <dcls> begin <stms>
<dcls> -> <dclList> <dclsRem>
<dclsRem> -> ; <dclList> <dclsRem>
<dclsRem> -> e
<dclList> -> <constDcl>
<dclList> -> <varDcl>
<dclList> -> <funcDcl>
<constDcl> -> const <ident> : <type> = <expression>
<varDcl> -> var <ident> : <type> = <expression>
<varDcl> -> var <ident> : <type>
<funcDcl> -> function <ident> ( <paramList> ) : <type>
<paramList> -> <param> <paramListRem>
<paramListRem> -> , <param> <paramListRem>
<paramListRem> -> e
<param> -> <ident> : <type>
<stms> -> <stm> <stms>
<stmsRem> -> <stm> <stmsRem>
<stmsRem> -> e
<stm> -> <ass>
<stm> -> <if>
<stm> -> <while>
<stm> -> <read>
<stm> -> <write>
<while> -> while ( <expression> ) <stms> wend
<if> -> if ( <expression> ) <stms> <else> iend
<else> -> elif ( <expression> ) <stms> <else>
<else> -> else <stms>
<else> -> e
<read> -> read ( <identList> ) ;
<ass> -> <ident> = <expression> ;
<expression> -> <simexp> <expressionRem>
<expressionRem> -> <relOp> <simexp> <expressionRem>
<expressionRem> -> e
<expList> -> <expression> <expListRemainder>
<expList> -> e
<expListRemainder> -> , <expression> <expListRemainder>
<expListRemainder> -> e
<simexp> -> <simterm> <simexpRem>
<simexpRem> -> <lowPriorityOp> <simterm> <simexpRem>
<simexpRem> -> e
<simterm> -> <term> <simtermRem>
<simtermRem> -> <highPriorityOp> <term> <simtermRem>
<simtermRem> -> e
<term> -> ( <expression> )
<term> -> + <term>
<term> -> - <term>
<term> -> not <term>
<term> -> ! <term>
<term> -> <ident>
<term> -> int
<term> -> float
<term> -> true
<term> -> false
<term> -> string
<ident> -> id <idRem>
<idRem> -> [ <expression> ] <idRem>
<idRem> -> ( <expList> ) <idRem>
<idRem> -> e
<relOp> -> <
<relOp> -> >
<relOp> -> <=
<relOp> -> >=
<relOp> -> ==
<relOp> -> !=
<lowPriorityOp> -> +
<lowPriorityOp> -> -
<lowPriorityOp> -> or
<highPriorityOp> -> *
<highPriorityOp> -> /
<highPriorityOp> -> mod
<highPriorityOp> -> div
<highPriorityOp> -> and

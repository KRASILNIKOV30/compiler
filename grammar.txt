<Z> -> <program> #
<program> -> <program> <programNode> ; | <programNode> ;
<programNode> -> <declaration> | <statement>

<declaration> -> <variableDeclaration> | <constDeclaration> | <functionDeclaration>

<variableDeclaration> -> var id <typeGuideOpt> = <expression> | var id <typeGuide>
<constDeclaration> -> const id <typeGuideOpt> = <expression>
<functionDeclaration> -> function id ( <paramList> ) <typeGuide> <blockStatement>
<paramList> -> <parameter> <paramListRem> | e
<paramListRem> -> , <parameter> <paramListRem> | e
<parameter> -> id <typeGuideOpt> = <expression> | id <typeGuide>
<typeGuideOpt> -> <typeGuide> | e
<typeGuide> -> : <type>

<statement> -> <assignmentStatement> | <blockStatement> | <whileStatement> | <returnStatement> | <ifStatement> | <expressionStatement> | <iterStatement>

<assignmentStatement> -> <ident> = <expression>

<blockStatement> -> <openBlock> <blockActions> <closeBlock>
<openBlock> -> {
<closeBlock> -> }
<blockActions> -> <programNode> ; <blockActions> | e

<expressionStatement> -> <expression>

<whileStatement> -> <whileHead> <blockStatement>
<whileHead> -> while ( <expression> )

<iterStatement> -> <iterHead> <blockStatement>
<iterHead> -> iter ( id of <expression> ) | iter ( id of <expression> < <adapterList> )
<adapterList> -> <adapter> < <adapterList> | <adapter>
<adapter> -> drop ( <expression> ) | take ( <expression> ) | reverse | filter ( <expression> ) | transform ( <expression> )

<returnStatement> -> return <expression> | return

<ifStatement> -> <ifHead> <blockStatement> <else>
<ifHead> -> if ( <expression> )
<else> -> <elseHead> <blockStatement> | <elseIfHead> <blockStatement> <else> | e
<elseHead> -> else
<elseIfHead> -> else if ( <expression> )

<expression> -> <expression> <relOp> <simexp> | <simexp> | <arrowFunctionExpression> | <initializerList>
<expListOpt> -> <expList> | e
<expList> -> <expList> , <expression> | <expression>
<simexp> -> <simexp> <lowPriorityOp> <simterm> | <simterm>
<simterm> -> <simterm> <highPriorityOp> <term> | <term>
<term> -> ( <expression> ) | + <term> | - <term> | not <term> | ! <term> | <ident> | int | float | true | false | string

<ident> -> <ident> [ <expression> ] | <ident> ( <argListOpt> ) | id
<argListOpt> -> <argList> | e
<argList> -> <argList> , <arg> | <arg>
<arg> -> <expression>

<relOp> -> < | > | <= | >= | == | !=
<lowPriorityOp> -> + | - | or
<highPriorityOp> -> * | / | mod | div | and

<arrowFunctionHead> -> ( <paramList> )
<arrowFunctionWithExpr> -> <arrowFunctionHead> -> <expression>
<arrowFunctionWithBlockHead> -> <arrowFunctionHead> ->
<arrowFunctionWithBlock> -> <arrowFunctionWithBlockHead> <blockStatement>
<arrowFunctionExpression> -> <arrowFunctionWithExpr> | <arrowFunctionWithBlock>

<initializerList> -> [ <arrayItemList> ]
<arrayItemList> -> <arrayItemList> , <arrayItem> | <arrayItem>
<arrayItem> -> <expression>

<type> -> <typeItem> | <typeItem> -> <type>
<typeItem> -> <primitiveType> | <arrayType>
<arrayType> -> <primitiveType> [ ]
<primitiveType> -> int | float | string | bool
